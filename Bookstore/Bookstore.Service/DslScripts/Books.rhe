Module Bookstore
{
    Entity Book
    {
         
        
        ShortString Code { Unique; Required; AutoCode; }
        ShortString Title { Required; }
        Integer NumberOfPages;
        Reference Author Bookstore.Person;
        DateTime LastModifiedTime;
        MonitorRecord;

        SaveMethod
        {
            Initialization UpdatingLastModifiedTime 
            '
                foreach ( var item in insertedNew )
                {
                if(item.LastModifiedTime==null)
                    item.LastModifiedTime=DateTime.Now;
                
                } 
            ';
       }

        ItemFilter  CommonMisspeling 'item => item.Title.Contains("Curiosity")'; 
        InvalidData CommonMisspeling 'You can not insert the book with title Curiosity!';


        ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
            {
                var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
                return filtered;
            }';


       FilterBy ComplexSearch '(repository, parameter ) => 
       {
        
          var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
          if(parameter.ForeignBooksOnly == true)
          query = query.Where(item => item.Extension_ForeignBook.ID != null);
          Book[] books = query.ToSimple().ToArray();

          if( parameter.MaskTitles == true)
            foreach(var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                book.Title = book.Title.First() + "***" + book.Title.Last();

          return books;
      
       }';

      }

//Entity Book <--------------------------------------------------------------------------------------------------------------------------------->


        Entity TestMonitorRecord {
        
        MonitorRecord;
        
        }



      Parameter LongBooks3
       {
           Integer MinimumPages;
           Bool ForeignBooksOnly;
       }

       Entity Disposal
        {
            Reference Book { Required; }
            LongString Explanation { Required; }
            DateTime EffectiveSince { CreationTime; }

            ItemFilter ImportantBookExplanation 'item => item.Book.Title.Contains("important") && item.Explanation.Length < 50';
            InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.';

            ItemFilter HighRating 'item => item.Book.Extension_BookRating.Rating > 100';
            InvalidData HighRating 'You are not allowed to dispose a book with rating above 100.';

         }

    Entity BookRating
    {
        Extends Bookstore.Book;
        Decimal Rating; 
        DateTime ModifiedRating {ModificationTimeOf Bookstore.BookRating.Rating; }
    }


    Parameter LongBooks;

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }


    Entity Person{
        ShortString Code { AutoCode; }
        ShortString Name;
        DateTime Creation_time { CreationTime; }
        Logging { AllProperties; }
        Deactivatable;
        
    }


      Entity Test2{
      
      CodeTable;
      }


    Entity Comment{

        Reference Book { Detail; }
        LongString Text;
        DateTime Date_of_entry { DenyUserEdit; DefaultValue 'item=> DateTime.Now.Date'; }
    }


    Entity Employee{

        ShortString name;
        Integer VatNumber { Unique; }
        Integer TestPeriod;
        
    }


    Entity ChildrensBook{

    Extends Bookstore.Book;
    Integer AgeFrom {MinValue 6; MaxValue 15;}
    Integer AgeTo { MinValue 6; MaxValue 15; }
    IntegerRange AgeFrom AgeTo; // A simple validation.
}


Entity ForeignBook{

    Extends Bookstore.Book;
    ShortString OriginalLanguage;
    Reference Translator Bookstore.Person;
}


Entity Topic{

    ShortString Name { Unique; Required; }
    ItemFilter ContainsRequiredMark 'item => item.Name.Contains("Required")';
    Lock ContainsRequiredMark 'Name contains required mark.';
}


Entity BookTopic{

    Reference Book { Detail; }
    Reference Topic { Required; }
    UniqueMultiple 'Book Topic';
}

Entity Review{
Reference Book{Required;}
Integer Score {Required; MinValue 1; MaxValue 5;}
LongString Text;

SaveMethod{
 LoadOldItems
        {
            Take Score;
            Take 'Book.Title';
        }
    
}

}






Entity Departments{

        ShortString Code { Unique; }
        LongString Description;
        DateTime LastModifiedTimeOf{LastModifiedTime;}
    }


 Entity EducationRecords{

        Date Date;
        ShortString Description;
        Reference Employee {Detail;}
        }


 Entity Manager{

    Extends Bookstore.Employee;
    ShortString InformationOnBonuses;
 }


 Entity EmployeeDepartment{

    Reference Employee { Detail; }
    Reference Departments { Detail; }  
 }

 Browse BookGrid Bookstore.Book
{
    Take Code;
    Take Title;
    Take 'Author.Name';
    Take TranslatorName 'Extension_ForeignBook.Translator.Name';
    Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
}

SqlQueryable BookInfo <SQL\BookInfo.sql>
{
    Extends Bookstore.Book;
    Integer NumberOfComments;

    AutodetectSqlDependencies;
}

SqlQueryable BookInfo2 <SQL\BookInfo2.sql>
{
    Extends Bookstore.Book;
    Integer NumberOfTopics;

    AutodetectSqlDependencies;
}

Browse BookGrid2 Bookstore.Book
{
    Take Title;
    Take 'Author.Name';
    Take NumberOfTopics 'Extension_BookInfo2.NumberOfTopics';
}

   Hardcoded Genre
{
    ShortString Label; // Short text displayed to user.
    LongString Description;
    Bool IsFiction;

    Entry ScienceFiction
    {
        Value Label 'Science fiction';
        Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
        Value IsFiction 1;
    }

    Entry Biography
    {
        Value Label 'Biography';
        Value Description 'A written narrative of a persons life.';
        Value IsFiction 0;
    }
}


      Action InsertManyBooks
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < parameter.NumberOfBooks; i++)
            {
                string newTitle = parameter.TitlePrefix + " - " + (i + 1);
                var newBook = new Bookstore.Book { Code = $"{i+100}", Title = newTitle };
                repository.Bookstore.Book.Insert(newBook);
            }
        }'
    {
        Integer NumberOfBooks;
        ShortString TitlePrefix;
    }

   
    SqlView ActivePersons23 <SQL\ActivePersons.sql>
    {
    
      AutodetectSqlDependencies;
    }


    SqlQueryable UsingFromSqlViewActivePersons <SQl\ReadingSqlView.sql>{
      Extends Bookstore.Person;
      ShortString Name;
      AutodetectSqlDependencies;
    }







    Polymorphic SalesItem{
        ShortString Code;
        Money Price;
    }

    Entity Food {
        ShortString Calories;
        ShortString Code{Unique;}
        Money Price;

        Is Bookstore.SalesItem;

        
    
    }

    Entity Food2 {
        ShortString Calories;
        ShortString Code{Unique;}
        Money Price;

        Is Bookstore.SalesItem{
        Where 'Price != null';
        }

        
    
    }

    Entity BookTestPolymorphic{
        Integer NumberOfPages;
        ShortString Code{Unique;}
        Money Price;

        Is Bookstore.SalesItem;
    
    }

    Entity Shipment
    {
        ShortString TargetAddress;
        DateTime DeliveryDate;
        DateTime CreatedAt { CreationTime; }

        Is Bookstore.ShipmentEvent 'Creating'
        {
            Implements Bookstore.ShipmentEvent.EffectiveSince "CreatedAt";
            Implements Bookstore.ShipmentEvent.Shipment "ID";
            Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.Preparing;
            
        }
    }

    Entity ShipmentItem
    {
        Reference Shipment { Detail; }
        Reference Book;
    }

    Browse ShipmentGrid Bookstore.Shipment
    {
        Take TargetAddress;
        Take DeliveryDate;
        Take CurrentStatus 'Extension_ShipmentCurrentState.Status.Name';
    }

     Polymorphic ShipmentEvent
    {
        DateTime EffectiveSince;
        Reference Shipment;
        Reference NewStatus Bookstore.ShipmentStatus;
    }

    Entity ApproveShipment
    {
        DateTime EffectiveSince { CreationTime; }
        Reference Shipment;

        LongString Explanation { Required; }

        Is Bookstore.ShipmentEvent
        {
            Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.Approved;
        }
    }

    Entity DeliveryStarted
    {
        DateTime EffectiveSince { CreationTime; }
        Reference Shipment;

        Is Bookstore.ShipmentEvent
        {            
            Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.DeliveryInProgress;
        }
    }

    Entity DeliveryFinished
    {
        DateTime EffectiveSince { CreationTime; }
        Reference Shipment;

        Is Bookstore.ShipmentEvent
        {            
            Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.Delivered;
        }
    }

     Hardcoded ShipmentStatus
    {
        Entry Preparing;
        Entry Approved;
        Entry DeliveryInProgress;
        Entry Delivered;
    }

    SqlQueryable ComputeShipmentCurrentState <SQL\ComputeShipmentCurrentState.sql>
    {
        Extends Bookstore.Shipment;
        Reference Status Bookstore.ShipmentStatus; 

        ChangesOnLinkedItems Bookstore.ApproveShipment.Shipment;
        ChangesOnLinkedItems Bookstore.DeliveryStarted.Shipment;
        ChangesOnLinkedItems Bookstore.DeliveryFinished.Shipment;

        AutodetectSqlDependencies;
    }

    Entity ShipmentCurrentState
    {
        ComputedFrom Bookstore.ComputeShipmentCurrentState
        {
            KeepSynchronized;
            AllProperties;
        }
    }








    
        
         



}

